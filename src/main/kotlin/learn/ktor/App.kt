/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package learn.ktor

import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.databind.SerializationFeature
import com.google.inject.Guice
import io.ktor.application.Application
import io.ktor.application.ApplicationCallPipeline
import io.ktor.application.call
import io.ktor.application.install
import io.ktor.features.CORS
import io.ktor.features.CallLogging
import io.ktor.features.ContentNegotiation
import io.ktor.features.DefaultHeaders
import io.ktor.http.HttpMethod
import io.ktor.http.cio.websocket.timeout
import io.ktor.jackson.jackson
import io.ktor.response.respondText
import io.ktor.routing.Routing
import io.ktor.routing.get
import io.ktor.sessions.Sessions
import io.ktor.sessions.cookie
import io.ktor.sessions.get
import io.ktor.sessions.sessions
import io.ktor.sessions.set
import io.ktor.util.generateNonce
import io.ktor.websocket.WebSockets
import learn.ktor.injection.modules.ApplicationModule
import learn.ktor.injection.modules.ResourceModule
import learn.ktor.injection.modules.ServiceModule
import java.time.Duration

fun Application.main() {
    val objectMapper = installFeatures(this)

    Guice.createInjector(
            ApplicationModule(this, objectMapper),
            ServiceModule(),
            ResourceModule()
    )

    intercept(ApplicationCallPipeline.Features) {
        if (call.sessions.get<Session>() == null) {
            call.sessions.set(Session(generateNonce()))
        }
    }
}

fun installFeatures(application: Application) = with(application) {
    install(DefaultHeaders)
    install(CallLogging)
    install(Sessions) {
        cookie<Session>("SESSION")
    }
    install(CORS) {
        method(HttpMethod.Options)
        anyHost()
        allowCredentials = true
        allowNonSimpleContentTypes = true
        maxAgeInSeconds = Duration.ofDays(1).seconds
    }
    install(WebSockets) {
        timeout = Duration.ofSeconds(10)
    }

    install(Routing) {
        get("/test") {
            call.respondText { "test" }
        }
    }

    lateinit var objectMapper: ObjectMapper
    install(ContentNegotiation) {
        jackson {
            configure(SerializationFeature.INDENT_OUTPUT, true)
            objectMapper = this
        }
    }
    (objectMapper)
}
